name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
      
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
        
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run ESLint
        run: npm run format:lint || true # Continue even if linting fails initially

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Run tests
        run: npm run test:ci || true
        env:
          DATABASE_URL: ${{ secrets.DATABASE_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          PABBLY_WEBHOOK_URL: ${{secrets.PABBLY_WEBHOOK_URL}}
          EMAIL_HOST: ${{secrets.EMAIL_HOST}}
          EMAIL_PORT: ${{secrets.EMAIL_PORT}}
          EMAIL_SECURE: ${{secrets.EMAIL_SECURE}}
          EMAIL_USER: ${{secrets.EMAIL_USER}}
          EMAIL_PASSWORD: ${{secrets.EMAIL_PASSWORD}}
          EMAIL_FROM: ${{secrets.EMAIL_FROM}}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next
          retention-days: 1

  deploy:
    name: Deploy to Vercel
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Create .npmrc file with legacy-peer-deps
        run: echo "legacy-peer-deps=true" > .npmrc
        
      - name: Pull Vercel Environment Information
        run: |
         vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
         vercel env pull .env --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}