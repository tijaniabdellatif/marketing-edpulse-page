// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql" // You can change this to mysql, sqlite, etc.
  url       = env("DATABASE_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========== ENUMS ==========

enum Occupation {
  STUDENT
  EMPLOYEE
  FREELANCER
  FREE_OF_FUNCTION
}

enum InterestType {
  GRAMMAR
  WRITING
  LISTENING
  PUBLIC_SPEAKING
}

enum PreferenceType {
  ONLINE
  SELF_PACED
  WITH_INSTRUCTOR
}

enum SubmissionStatus {
  PARTIAL      // User has partially completed the form
  COMPLETED    // User has completed the form
}

// ========== MODELS ==========

// Main visitor model
model Visitor {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Basic information
  firstName    String?
  lastName     String?
  email        String?
  age          Int?
  phone        String?
  reasons      String?   // Why they're interested
  occupation   Occupation?

  // Company information - constants
  company      String    @default("EdPulse-Education")
  department   String    @default("MARKETING")

  // Relationships
  session      Session?
  interests    Interest[]
  preferences  Preference[]
  submission   FormSubmission?
  
  @@index([email])
}

// Interest model
model Interest {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  type        InterestType
  
  // Relationship to visitor
  visitorId   String
  visitor     Visitor      @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  
  @@unique([visitorId, type])
  @@index([visitorId])
}

// Learning preference model
model Preference {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  type        PreferenceType
  
  // Relationship to visitor
  visitorId   String
  visitor     Visitor         @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  
  @@unique([visitorId, type])
  @@index([visitorId])
}

// Track visitor session (just for the landing page)
model Session {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  startTime    DateTime  @default(now())
  
  // Tracking information
  ipAddress    String?
  userAgent    String?
  referrer     String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  
  // Browser and device info
  browser      String?
  deviceType   String?   // mobile, tablet, desktop
  os           String?
  
  // Relationship to visitor
  visitorId    String    @unique // One-to-one relationship
  visitor      Visitor   @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  
  // Submission during this session
  submission   FormSubmission?
  
  @@index([visitorId])
}

// Track form submissions
model FormSubmission {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  status          SubmissionStatus
  
  // Form fields tracking
  personalInfo    Boolean          @default(false) // First name, last name
  contactInfo     Boolean          @default(false) // Email, phone
  reasonsInfo     Boolean          @default(false) // Reasons field
  interestsInfo   Boolean          @default(false) // Interests selected
  preferencesInfo Boolean          @default(false) // Preferences selected
  
  // Time tracking
  startTime       DateTime         @default(now())
  submitTime      DateTime?
  timeSpent       Int?             // Time spent on form in seconds
  
  // Tracking for incomplete submissions
  lastFieldSeen   String?
  
  // Relationships
  visitorId       String           @unique // One-to-one relationship
  visitor         Visitor          @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  sessionId       String           @unique // One-to-one relationship
  session         Session          @relation(fields: [sessionId], references: [id])
  
  // Pabbly tracking
  sentToPabbly    Boolean          @default(false)
  pabblyResponse  String?          // Response from Pabbly webhook
  pabblySentAt    DateTime?
  
  @@index([visitorId])
  @@index([sessionId])
  @@index([status])
}