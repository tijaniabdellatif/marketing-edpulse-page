// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql" // You can change this to mysql, sqlite, etc.
  url       = env("DATABASE_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========== ENUMS ==========

enum InterestType {
  GRAMMAR
  WRITING
  SPEAKING
  LISTENING
  READING
  VOCABULARY
  PRONUNCIATION
  CULTURE
  BUSINESS_ENGLISH
  ACADEMIC_ENGLISH
  TEST_PREPARATION
  CONVERSATION
  OTHER
}

enum PreferenceType {
  VISUAL_LEARNING
  AUDIO_LESSONS
  GROUP_SESSIONS
  ONE_ON_ONE
  SELF_PACED
  STRUCTURED_COURSE
  SHORT_LESSONS
  IMMERSIVE
  GAME_BASED
  READING_BASED
  WRITING_FOCUSED
  SPEAKING_FOCUSED
  OTHER
}

enum Occupation {
  STUDENT
  PROFESSIONAL
  TEACHER
  BUSINESS_OWNER
  FREELANCER
  RETIRED
  HOMEMAKER
  OTHER
}

enum SubmissionStatus {
  COMPLETED
  PARTIAL
  ABANDONED
}

model Visitor {
  id         String      @id @default(uuid())
  firstName  String
  lastName   String
  email      String?     @unique
  phone      String?
  age        Int?
  reasons    String?
  occupation Occupation?
  company    String?
  department String?


  // Relations
  interests   Interest[]
  preferences Preference[]
  sessions    Session[]
  submissions FormSubmission[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interest {
  id        String       @id @default(uuid())
  visitor   Visitor      @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  visitorId String
  type      InterestType

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([visitorId])
}

model Preference {
  id        String         @id @default(uuid())
  visitor   Visitor        @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  visitorId String
  type      PreferenceType

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([visitorId])
}

model Session {
  id        String  @id @default(uuid())
  visitor   Visitor @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  visitorId String

  // Device info
  ipAddress  String?
  userAgent  String?
  browser    String?
  deviceType String?
  os         String?

  // Referrer
  referrer String?

  // UTM parameters
  utmSource   String?
  utmMedium   String?
  utmCampaign String?

  // Relations
  submissions FormSubmission[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([visitorId])
}

model FormSubmission {
  id        String   @id @default(uuid())
  visitor   Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  visitorId String
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  sessionId String?

  // Submission status
  status SubmissionStatus @default(PARTIAL)

  // Form completion tracking
  personalInfo    Boolean @default(false)
  contactInfo     Boolean @default(false)
  reasonsInfo     Boolean @default(false)
  interestsInfo   Boolean @default(false)
  preferencesInfo Boolean @default(false)

  // Partial submission tracking
  lastFieldSeen String?

  // Time tracking
  startTime  DateTime  @default(now())
  submitTime DateTime?
  timeSpent  Int? // In seconds

  // Pabbly integration
  sentToPabbly   Boolean   @default(false)
  pabblyResponse String?
  pabblySentAt   DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([visitorId])
  @@index([sessionId])
}
